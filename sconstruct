import os
import sys
import subprocess
from pathlib import Path

PROJECT_NAME = "vgame"

SRC_DIR = "./src"
INCLUDE_DIR = "./include"
LIB_DIR = "./lib"
OBJ_DIR = "./obj"
BIN_DIR = "./bin"
GAMES_DIR = "./games"

LIBS = [
  "raylib",
  "luajit"
]

LINUX_DEBUG_FLAGS = ""
WINDOWS_DEBUG_FLAGS = ""

LINUX_RELEASE_FLAGS = "-O2"
WINDOWS_RELEASE_FLAGS = "/O2 /GA"



env = Environment(CPPPATH = INCLUDE_DIR)

# To run the application, specify the "--run" flag when calling scons.
AddOption(
  "--run",
  action="store_true",
  help="Start the application",
  default=False
)
if GetOption("run"):
  sys.exit(subprocess.call([BIN_DIR + "/" + PROJECT_NAME]))

# To build in relase mode, specify the "--release" flag when calling scons.
AddOption(
  "--release",
  action="store_true",
  help="Build in release mode",
  default=False
)
if GetOption("release"):
  if env["PLATFORM"] == "win32":
    env.Append(
      CCFLAGS = WINDOWS_RELEASE_FLAGS,
      LINKFLAGS = "/NODEFAULTLIB:LIBCMT",
      CPPDEFINES="BUILD_RELEASE"
    )
  else:
    env.Append(CCFLAGS = LINUX_RELEASE_FLAGS, CPPDEFINES="BUILD_RELEASE")

  print("Building for release...")
else:
  if env["PLATFORM"] == "win32":
    env.Append(
      CCFLAGS = WINDOWS_DEBUG_FLAGS,
      LINKFLAGS = "/NODEFAULTLIB:LIBCMT",
      CPPDEFINES="BUILD_DEBUG"
    )
  else:
    env.Append(CCFLAGS = LINUX_DEBUG_FLAGS, CPPDEFINES="BUILD_DEBUG")

  print("Building in debug mode...")



# Add platform-specific libraries.
if env["PLATFORM"] == "win32":
  LIBS += [
    "lua51", # Apparently windows also needs this library for luajit to work.
    "opengl32",
    "gdi32",
    "winmm",
    "msvcrt",
    "user32",
    "shell32"
  ]
else:
  LIBS += [
    "GL",
    "m",
    "pthread",
    "dl",
    "rt",
    "X11"
  ]

env.VariantDir(OBJ_DIR, SRC_DIR, duplicate = False)
env.Program(
  BIN_DIR + "/" + PROJECT_NAME, [Glob(OBJ_DIR + "/*.c"), Glob(OBJ_DIR + "/lualib/*.c")],
  LIBS = LIBS,
  LIBPATH = LIB_DIR
)



# Copy games from the "games" directory.
BIN_GAMES_DIR = str(Path(BIN_DIR).joinpath(GAMES_DIR))

env.Execute(Delete(BIN_GAMES_DIR))
env.Execute(Copy(BIN_GAMES_DIR, GAMES_DIR))
env.Clean(BIN_GAMES_DIR, BIN_GAMES_DIR)

